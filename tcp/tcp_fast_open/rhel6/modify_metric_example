commit 323dc3da6d6894133ae83f325a01467787c582f6
Author: Jesper Brouer <jbrouer@redhat.com>
Date:   Tue Oct 16 09:10:16 2012 -0400

    [net] Add rtnetlink init_rcvwnd to set the TCP initial receive window
    
    Message-id: <20121016090738.31020.12256.stgit@dragon>
    Patchwork-id: 55025
    O-Subject: [RHEL6.4 PATCH] net: Add rtnetlink init_rcvwnd to set the TCP initial receive window
    Bugzilla: 795598
    RH-Acked-by: David S. Miller <davem@redhat.com>
    RH-Acked-by: Neil Horman <nhorman@redhat.com>
    RH-Acked-by: Thomas Graf <tgraf@redhat.com>
    
    Bugzilla: 795598
     https://bugzilla.redhat.com/show_bug.cgi?id=795598
    Brew: 4980463
     http://brewweb.devel.redhat.com/brew/taskinfo?taskID=4980463
    
    Make it possible to adjust the TCP initial receive window,
    via iproute setting initrwnd, per route basis.
    This is being requested by several of our customers.
    
    Note on kABI workaround:
     The kABI workaround tricks will shift tclassid (routing realm)
     in struct dst_entry with 32 bit.  I have not been able to find
     any external modules that depend on this.  Size and cache-alignment
     (of __refcnt) in dst_entry is keep intact.  On 32bit archs
     there is no-longer any padding fields left.
    
    Also note that changing the size of dst_entry->metrics[] and RTAX_MAX
    also affect the fib structures, that carries a copy of metrics[].
    The kABI tools have not reported issues with the the fib structures.
    
    Tested with newest version of iproute, as the RHEL6 userspace
    tool need to be updated/patches to support option "initrwnd".
    
    Backport of commit:
    
     commit 31d12926e37291970dd4f6e9940df3897766a81d
     Author: laurent chavey <chavey@google.com>
     Date:   Tue Dec 15 11:15:28 2009 +0000
    
        net: Add rtnetlink init_rcvwnd to set the TCP initial receive window
    
        Add rtnetlink init_rcvwnd to set the TCP initial receive window size
        advertised by passive and active TCP connections.
        The current Linux TCP implementation limits the advertised TCP initial
        receive window to the one prescribed by slow start. For short lived
        TCP connections used for transaction type of traffic (i.e. http
        requests), bounding the advertised TCP initial receive window results
        in increased latency to complete the transaction.
        Support for setting initial congestion window is already supported
        using rtnetlink init_cwnd, but the feature is useless without the
        ability to set a larger TCP initial receive window.
        The rtnetlink init_rcvwnd allows increasing the TCP initial receive
        window, allowing TCP connection to advertise larger TCP receive window
        than the ones bounded by slow start.
    
        Signed-off-by: Laurent Chavey <chavey@google.com>
        Signed-off-by: David S. Miller <davem@davemloft.net>
    
    Signed-off-by: Jesper Dangaard Brouer <jbrouer@redhat.com>
    Signed-off-by: Jarod Wilson <jarod@redhat.com>

diff --git a/include/linux/rtnetlink.h b/include/linux/rtnetlink.h
index 915addf..31ca9fd 100644
--- a/include/linux/rtnetlink.h
+++ b/include/linux/rtnetlink.h
@@ -377,10 +377,18 @@ enum
 #define RTAX_FEATURES RTAX_FEATURES
 	RTAX_RTO_MIN,
 #define RTAX_RTO_MIN RTAX_RTO_MIN
-	__RTAX_MAX
+	__RTAX_MAX,
+#define RTAX_INITRWND __RTAX_MAX /* Red Hat kABI workaround for dst_entry */
+	__RTAX_NEW_MAX
 };
 
-#define RTAX_MAX (__RTAX_MAX - 1)
+/* This Red Hat kABI workaround, requires some subtle details to understand.
+ * We MUST keep the exact string expansion "(__RTAX_MAX - 1)" else the kABI
+ * checker will miss-fire, as its based on gcc's preprocessor and it keeps
+ * the enum literals (not like real defines that gets macro expanded).
+ */
+#define RTAX_MAX_ORIG (__RTAX_MAX - 1)
+#define RTAX_MAX (__RTAX_NEW_MAX - 1)
 
 #define RTAX_FEATURE_ECN	0x00000001
 #define RTAX_FEATURE_SACK	0x00000002
diff --git a/include/net/dst.h b/include/net/dst.h
index 5a900dd..4709e67 100644
--- a/include/net/dst.h
+++ b/include/net/dst.h
@@ -70,7 +70,15 @@ struct dst_entry
 
 	struct  dst_ops	        *ops;
 
+/* This Red Hat kABI workaround will shift tclassid 32 bit, while we
+ * still keep the original size of dst_entry and assures alignment
+ * (see further down).
+ */
+#ifdef __GENKSYMS__
+	u32			metrics[RTAX_MAX_ORIG];
+#else
 	u32			metrics[RTAX_MAX];
+#endif
 
 #ifdef CONFIG_NET_CLS_ROUTE
 	__u32			tclassid;
@@ -83,11 +91,23 @@ struct dst_entry
 	 * Align __refcnt to a 64 bytes alignment
 	 * (L1_CACHE_SIZE would be too much)
 	 */
+/* Red Hat kABI workaround to assure aligning __refcnt, while
+ * consuming 32 bit of padding for our metrics expansion above.
+ * On 32bit archs not padding remains.
+ */
+#ifdef __GENKSYMS__
 #ifdef CONFIG_64BIT
 	long			__pad_to_align_refcnt[2];
 #else
 	long			__pad_to_align_refcnt[1];
 #endif
+#else  /* __GENKSYMS__ */
+#ifdef CONFIG_64BIT
+	u32			__pad_hole_in_struct;
+	long			__pad_to_align_refcnt[1];
+#endif
+#endif /* __GENKSYMS__ */
+
 	/*
 	 * __refcnt wants to be on a different cache line from
 	 * input/output/ops or performance tanks badly
diff --git a/include/net/tcp.h b/include/net/tcp.h
index a4db9f3..93b5389 100644
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@ -991,7 +991,8 @@ static inline void tcp_sack_reset(struct tcp_options_received *rx_opt)
 /* Determine a window scaling and initial window to offer. */
 extern void tcp_select_initial_window(int __space, __u32 mss,
 				      __u32 *rcv_wnd, __u32 *window_clamp,
-				      int wscale_ok, __u8 *rcv_wscale);
+				      int wscale_ok, __u8 *rcv_wscale,
+				      __u32 init_rcv_wnd);
 
 static inline int tcp_win_from_space(int space)
 {
diff --git a/net/ipv4/syncookies.c b/net/ipv4/syncookies.c
index 4de05c7..89a0988 100644
--- a/net/ipv4/syncookies.c
+++ b/net/ipv4/syncookies.c
@@ -355,7 +355,8 @@ struct sock *cookie_v4_check(struct sock *sk, struct sk_buff *skb,
 
 	tcp_select_initial_window(tcp_full_space(sk), req->mss,
 				  &req->rcv_wnd, &req->window_clamp,
-				  ireq->wscale_ok, &rcv_wscale);
+				  ireq->wscale_ok, &rcv_wscale,
+				  dst_metric(&rt->u.dst, RTAX_INITRWND));
 
 	ireq->rcv_wscale  = rcv_wscale;
 
diff --git a/net/ipv4/tcp_output.c b/net/ipv4/tcp_output.c
index a64add5..101f151 100644
--- a/net/ipv4/tcp_output.c
+++ b/net/ipv4/tcp_output.c
@@ -179,7 +179,8 @@ static inline void tcp_event_ack_sent(struct sock *sk, unsigned int pkts)
  */
 void tcp_select_initial_window(int __space, __u32 mss,
 			       __u32 *rcv_wnd, __u32 *window_clamp,
-			       int wscale_ok, __u8 *rcv_wscale)
+			       int wscale_ok, __u8 *rcv_wscale,
+			       __u32 init_rcv_wnd)
 {
 	unsigned int space = (__space < 0 ? 0 : __space);
 
@@ -227,8 +228,13 @@ void tcp_select_initial_window(int __space, __u32 mss,
 		if (mss > 1460)
 			init_cwnd =
 			max_t(u32, (1460 * TCP_DEFAULT_INIT_RCVWND) / mss, 2);
-
-		*rcv_wnd = min(*rcv_wnd, init_cwnd * mss);
+		/* when initializing use the value from init_rcv_wnd
+		 * rather than the default from above
+		 */
+		if (init_rcv_wnd)
+			*rcv_wnd = min(*rcv_wnd, init_rcv_wnd * mss);
+		else
+			*rcv_wnd = min(*rcv_wnd, init_cwnd * mss);
 	}
 
 	/* Set the clamp no higher than max representable value */
@@ -2264,7 +2270,8 @@ struct sk_buff *tcp_make_synack(struct sock *sk, struct dst_entry *dst,
 			&req->rcv_wnd,
 			&req->window_clamp,
 			ireq->wscale_ok,
-			&rcv_wscale);
+			&rcv_wscale,
+			dst_metric(dst, RTAX_INITRWND));
 		ireq->rcv_wscale = rcv_wscale;
 	}
 
@@ -2352,7 +2359,8 @@ static void tcp_connect_init(struct sock *sk)
 				  &tp->rcv_wnd,
 				  &tp->window_clamp,
 				  sysctl_tcp_window_scaling,
-				  &rcv_wscale);
+				  &rcv_wscale,
+				  dst_metric(dst, RTAX_INITRWND));
 
 	tp->rx_opt.rcv_wscale = rcv_wscale;
 	tp->rcv_ssthresh = tp->rcv_wnd;
diff --git a/net/ipv6/syncookies.c b/net/ipv6/syncookies.c
index 3fd3b1b..48024f0 100644
--- a/net/ipv6/syncookies.c
+++ b/net/ipv6/syncookies.c
@@ -268,7 +268,8 @@ struct sock *cookie_v6_check(struct sock *sk, struct sk_buff *skb)
 	req->window_clamp = tp->window_clamp ? :dst_metric(dst, RTAX_WINDOW);
 	tcp_select_initial_window(tcp_full_space(sk), req->mss,
 				  &req->rcv_wnd, &req->window_clamp,
-				  ireq->wscale_ok, &rcv_wscale);
+				  ireq->wscale_ok, &rcv_wscale,
+				  dst_metric(dst, RTAX_INITRWND));
 
 	ireq->rcv_wscale = rcv_wscale;
 
