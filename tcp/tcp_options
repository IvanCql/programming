1 tcp_abort_on_overflow
It decides when the accept queue is full, that is the server does not call
"accept" in time, whether it will sent "rst" to the client.

tcp_check_req
--->tcp_v4_syn_recv_sock
    --->sk_acceptq_is_full (return NULL)
    	---> <sysctl_tcp_abort_on_overflow == 0>
		Y---> inet_rsk(req)->acked = 1
		N---> tcp_v4_send_reset
	
2 tcp_adv_win_scale
static inline int tcp_win_from_space(int space)
{
        return sysctl_tcp_adv_win_scale<=0 ?
                (space>>(-sysctl_tcp_adv_win_scale)) :
                space - (space>>sysctl_tcp_adv_win_scale);
}  

The percentage of buffer reserved for user application / claimed window to the
peer.

F.e, sysctl_tcp_adv_win_scale = 2,
it means we reserve 1/4 rcv_buf for user application async read,
and other 3/4 rcv_buf we can claim via window to the peer.

3 tcp_allowed_congestion_control
It shows the congestion control modules which are built into kernel and
allowed.

4 tcp_app_win
It specifies how much of the buffer space to reserve for the specific window.

5 tcp_autocorking
tcp_sendmsg()-->tcp_push()-->tcp_should_autocork()-->sysctl_tcp_autocorking
It tells whether we should automatically cork the tcp segments since there are
some segments already in qdisc or nic queues.

6 tcp_available_congestion_control
It shows the congestion control modules which are already registered. 

7 tcp_base_mss
/* The least MTU to use for probing */
#define TCP_BASE_MSS            512

8 tcp_challenge_ack_limit


9 tcp_congestion_control
Show / modify the current congestion control algorithm.

10 tcp_dsack
This option decides whether we support dsack function,
1 : enable
0 : disable

11 tcp_early_retrans
	0 disables ER
	1 enables ER
	2 enables ER but delays fast recovery and fast retransmit
	  by a fourth of RTT.
	  This mitigates connection falsely
	  recovers when network has a small degree of reordering
	  (less than 3 packets).
	3 enables delayed ER and TLP.
	4 enables TLP only.
	Default: 3

12 tcp_ecn
default value for tcp: 2
If its value is 1, it will send ECN enable options in SYN packet.

tcp flags layout
|               |
|---------------|
|C|E|U|A|P|R|S|F|
|---------------|
|7   5   3     0| 

a) way handshakes if we set tcp_ecn with 1
A                                        B
---> SYN (CWR=1, ECE=1)
		SYN+ACK (CWR=0,ECE=1)<---
---> ACK (CWR=0, ECE=0)

#define TCP_ECN_OK              1
#define TCP_ECN_QUEUE_CWR       2	/*	tell peer we have handled cwr	*/
#define TCP_ECN_DEMAND_CWR      4	/*	require peer to handle cwr	*/
#define TCP_ECN_SEEN            8

enum {           
	INET_ECN_NOT_ECT = 0,
	INET_ECN_ECT_1 = 1,
	INET_ECN_ECT_0 = 2,	/*	it means ip ecn function works	*/
	INET_ECN_CE = 3,	/*	router set it, and tcp get it from ip tos */
	INET_ECN_MASK = 3,
};       

b) tcp get ip tos
int tcp_v4_rcv(struct sk_buff *skb)
-->TCP_SKB_CB(skb)->ip_dsfield = ipv4_get_dsfield(iph);

ecn handle

router find congestion
IP_ECN_set_ce
--> iph->tos |= INET_ECN_CE

tcp_event_data_recv/tcp_data_queue_ofo (A)
-->tcp_ecn_check_ce
	-->__tcp_ecn_check_ce
		--> switch (TCP_SKB_CB(skb)->ip_dsfield & INET_ECN_MASK)
			case INET_ECN_CE:
			tp->ecn_flags |= TCP_ECN_DEMAND_CWR | TCP_ECN_SEEN;

tcp_transmit_skb (A)
-->tcp_ecn_send
	--> INET_ECN_xmit
		--> inet_sk(sk)->tos |= INET_ECN_ECT_0
	--> if (tp->ecn_flags & TCP_ECN_DEMAND_CWR)
		tcp_hdr(skb)->ece = 1;

tcp_ack (B)
-->tcp_ecn_rcv_ecn_echo
	--> if (th->ece && !th->syn && (tp->ecn_flags & TCP_ECN_OK))
	    	flag |= FLAG_ECE;
	-->tcp_try_to_open
		-->  if (flag & FLAG_ECE)
			tcp_enter_cwr(sk);
			-->tcp_init_cwnd_reduction
				-->tcp_ecn_queue_cwr
					--> if (tp->ecn_flags & TCP_ECN_OK)
						   tp->ecn_flags |= TCP_ECN_QUEUE_CWR;

tcp_transmit_skb (B)
-->tcp_ecn_send
	--> INET_ECN_xmit
		--> inet_sk(sk)->tos |= INET_ECN_ECT_0
	--> if (tp->ecn_flags & TCP_ECN_QUEUE_CWR) {
		tp->ecn_flags &= ~TCP_ECN_QUEUE_CWR;
	  	tcp_hdr(skb)->cwr = 1;
	    }

tcp_data_queue (A)
--> tcp_ecn_accept_cwr
	--> if (tcp_hdr(skb)->cwr)
		tp->ecn_flags &= ~TCP_ECN_DEMAND_CWR;


13 tcp_fack
This option decides whether we support fack.

14 tcp_fastopen

echo 3 > /proc/sys/net/ipv4/tcp_fastopen

To use this feature, the client application must use sendmsg() or sendto()
with MSG_FASTOPEN flag rather than connect() to perform a TCP handshake
automatically.  
	The values (bitmap) are
	1: Enables sending data in the opening SYN on the client w/ MSG_FASTOPEN.
	2: Enables TCP Fast Open on the server side, i.e., allowing data in
	   a SYN packet to be accepted and passed to the application before
	   3-way hand shake finishes.
	4: Send data in the opening SYN regardless of cookie availability and
	   without a cookie option.
	0x100: Accept SYN data w/o validating the cookie.
	0x200: Accept data-in-SYN w/o any cookie option present.
	0x400/0x800: Enable Fast Open on all listeners regardless of the
	   TCP_FASTOPEN socket option. The two different flags designate two
	   different ways of setting max_qlen without the TCP_FASTOPEN socket
	   option.

	Default: 1

	The values (bitmap) are
	1: Enables sending data in the opening SYN on the client w/ MSG_FASTOPEN.
	2: Enables TCP Fast Open on the server side, i.e., allowing data in
	   a SYN packet to be accepted and passed to the application before
	   3-way hand shake finishes.
	4: Send data in the opening SYN regardless of cookie availability and
	   without a cookie option.
	0x100: Accept SYN data w/o validating the cookie.
	0x200: Accept data-in-SYN w/o any cookie option present.
	0x400/0x800: Enable Fast Open on all listeners regardless of the
	   TCP_FASTOPEN socket option. The two different flags designate two
	   different ways of setting max_qlen without the TCP_FASTOPEN socket
	   option.

	Default: 1

	Note that the client & server side Fast Open flags (1 and 2
	respectively) must be also enabled before the rest of flags can take
	effect.
	Note that the client & server side Fast Open flags (1 and 2
	respectively) must be also enabled before the rest of flags can take
	effect.

15 tcp_fastopen_key

16 tcp_fin_timeout
#define TCP_TIMEWAIT_LEN (60*HZ) /* how long to wait to destroy TIME-WAIT state, about 60 seconds */
#define TCP_FIN_TIMEOUT TCP_TIMEWAIT_LEN 

This option decides the time that socket will stay in FIN_WAIT_2 state until
the peer to call close().

17 tcp_frto
default value: 2
Forward RTO recovery

If a never retransmited packet is sacked, the frto is true, undo it
if (tcp_try_undo_loss(sk, flag & FLAG_ORIG_SACK_ACKED))
	return;

18 tcp_keepalive_intvl
#define TCP_KEEPALIVE_INTVL     (75*HZ)
It decides the keepalive probe does not get acked, then we will send next
probe packet in 75s.

tcp has an option TCP_KEEPINTVL, to modify it for one socket.

19 tcp_keepalive_probes
The maximum keepalive probe packets that we send before we can make sure that
a connection is dead
tcp has an option TCP_KEEPCNT, to modify it for one socket.

20 tcp_keepalive_time
#define TCP_KEEPALIVE_TIME      (120*60*HZ)     /* two hours */
It decides if keepalive is enabled, then we will send probe packet every two
hours.

tcp has an option TCP_KEEPIDLE, to modify it for one socket.
it will start keeplive probe after this period.
#define TCP_KEEPIDLE            4       /* Start keeplives after this period */


21 tcp_limit_output_bytes
/* Default TSQ limit of two TSO segments */
int sysctl_tcp_limit_output_bytes __read_mostly = 131072;

22 tcp_low_latency
default value: 0
If its value is 1, then we will disable tcp prequeue,
which can handle packets in process context instead of softirq context.

23 tcp_max_orphans
The client sends fin, and gets ack, so it is in FIN_WAIT_2, and the server is
in CLOSE_WAIT. At present, if the client exits accidents, then the connection
in client kernel is orphan.
tcp_max_orphans controls the maximum number of orphan connections.
"too many orphaned sockets"

We call tcp_out_of_resources() when retransmit timer or probe timer fires.
tcp_out_of_resources()-->tcp_check_oom()-->tcp_too_many_orphans()

24 tcp_max_syn_backlog
default value : 256
-->listen(5)
	-->inet_listen(int backlog)
		-->inet_csk_listen_start(int nr_table_entries)
			-->reqsk_queue_alloc(unsigned int nr_table_entries)
				nr_table_entries = min_t(u32, nr_table_entries, sysctl_max_syn_backlog);
				nr_table_entries = max_t(u32, nr_table_entries, 8);
				nr_table_entries = roundup_pow_of_two(nr_table_entries + 1);
				lopt->max_qlen_log = ilog2(nr_table_entries);
		-->sk->sk_max_ack_backlog = backlog;

static inline int reqsk_queue_is_full(const struct request_sock_queue *queue)
{       
	return queue->listen_opt->qlen >> queue->listen_opt->max_qlen_log;
}


static inline bool sk_acceptq_is_full(const struct sock *sk)
{
	return sk->sk_ack_backlog > sk->sk_max_ack_backlog;
}   

This option decides the maximum number of listen() parameter.
And if we want to wait for more connection to be extablished,
we can increase it.

25 tcp_max_tw_buckets
default value:  NR_FILE * 2
#define NR_FILE  8192
tcp_init()
-->tcp_death_row.sysctl_max_tw_buckets = cnt / 2 = 65536 / 2 = 32768

It decides the maximum number of sockets in timewait state.

26 tcp_mem
the unit is PAGE_SIZE
static void __init tcp_init_mem(void)
{
	unsigned long limit = nr_free_buffer_pages() / 8;
	limit = max(limit, 128UL);
	sysctl_tcp_mem[0] = limit / 4 * 3;             	// 1/8 * 3/4 = 3/32
	sysctl_tcp_mem[1] = limit;			// 1/8
	sysctl_tcp_mem[2] = sysctl_tcp_mem[0] * 2;	// 1/8 * 3/4 * 2 = 3/16
}

static inline bool tcp_out_of_memory(struct sock *sk)
{
	if (sk->sk_wmem_queued > SOCK_MIN_SNDBUF && sk_memory_allocated(sk) > sk_prot_mem_limits(sk, 2))
		return true;
	return false;
}

("out of memory -- consider tuning tcp_mem\n");


38 tcp_rmem
#define SK_MEM_QUANTUM ((int)PAGE_SIZE)
limit = nr_free_buffer_pages() << (PAGE_SHIFT - 7);
max_rshare = min(6UL*1024*1024, limit);

sysctl_tcp_rmem[0] = SK_MEM_QUANTUM;
sysctl_tcp_rmem[1] = 87380;
sysctl_tcp_rmem[2] = max(87380, max_rshare);

sk->sk_rcvbuf = min(rcvmem, sysctl_tcp_rmem[2]);

check memmory with tcp_try_rmem_schedule() before tcp_queue_rcv().

static int tcp_try_rmem_schedule(struct sock *sk, struct sk_buff *skb,
				 unsigned int size)
{
	if (atomic_read(&sk->sk_rmem_alloc) > sk->sk_rcvbuf ||
	    !sk_rmem_schedule(sk, skb, size)) {

		if (tcp_prune_queue(sk) < 0)
			return -1;

		if (!sk_rmem_schedule(sk, skb, size)) {
			if (!tcp_prune_ofo_queue(sk))
				return -1;

			if (!sk_rmem_schedule(sk, skb, size))
				return -1;
		}
	}
	return 0;
}

static inline bool
sk_rmem_schedule(struct sock *sk, struct sk_buff *skb, int size)
{
	if (!sk_has_account(sk))
		return true;
	return size<= sk->sk_forward_alloc ||
		__sk_mem_schedule(sk, size, SK_MEM_RECV) ||
		skb_pfmemalloc(skb);
}

52 tcp_wmem
#define SK_MEM_QUANTUM ((int)PAGE_SIZE)
limit = nr_free_buffer_pages() << (PAGE_SHIFT - 7);
max_wshare = min(4UL*1024*1024, limit);
sysctl_tcp_wmem[0] = SK_MEM_QUANTUM;
sysctl_tcp_wmem[1] = 16*1024;
sysctl_tcp_wmem[2] = max(64*1024, max_wshare);

sk->sk_sndbuf <= sysctl_tcp_wmem[2]

static inline bool sk_stream_memory_free(const struct sock *sk)
{
	if (sk->sk_wmem_queued >= sk->sk_sndbuf)
		return false;

	return sk->sk_prot->stream_memory_free ?
		sk->sk_prot->stream_memory_free(sk) : true;
}

static inline bool sk_wmem_schedule(struct sock *sk, int size)
{
	if (!sk_has_account(sk))
		return true;
	return size <= sk->sk_forward_alloc ||
		__sk_mem_schedule(sk, size, SK_MEM_SEND);
}

27 tcp_min_tso_segs
default value : 2

tcp_xmit_size_goal()
{
	gso_size = sk->sk_pacing_rate / (2 * MSEC_PER_SEC);
	gso_size = max_t(u32, gso_size, sysctl_tcp_min_tso_segs * mss_now);
}

28 tcp_moderate_rcvbuf
default value : 1
adjust memory automatically

29 tcp_mtu_probing
default value : 0
0 - Disabled
1 - Disabled by default, enabled when an ICMP black hole detected
2 - Always enabled, use initial MSS of tcp_base_mss.

#define TCP_BASE_MSS            512
int sysctl_tcp_base_mss __read_mostly = TCP_BASE_MSS;

tcp_write_timeout
-->if (retransmits_timed_out(sk, sysctl_tcp_retries1, 0, 0)) {
	/* Black hole detection */
	tcp_mtu_probing(icsk, sk);
	dst_negative_advice(sk);
   }

30 tcp_no_metrics_save
default value : 0
It decides whether we will save tcp metrics

31 tcp_notsent_lowat
default value : -1
unsigned int sysctl_tcp_notsent_lowat __read_mostly = UINT_MAX;

tcp has an option TCP_NOTSENT_LOWAT, which limits the number of unsent bytes
in write queue.
#define TCP_NOTSENT_LOWAT       25      /* limit number of unsent bytes in write queue */
static inline u32 tcp_notsent_lowat(const struct tcp_sock *tp)
{      
	return tp->notsent_lowat ?: sysctl_tcp_notsent_lowat;
}    

static inline bool tcp_stream_memory_free(const struct sock *sk)
{      
	const struct tcp_sock *tp = tcp_sk(sk);
	u32 notsent_bytes = tp->write_seq - tp->snd_nxt;
	
	return notsent_bytes < tcp_notsent_lowat(tp);
}      


32 tcp_orphan_retries
default value : 0
It controls the retry times for an orphan connection to probe a window update.

33 tcp_reordering
default value : 3
The thresh of reordering.

/* After receiving this amount of duplicate ACKs fast retransmit starts. */
#define TCP_FASTRETRANS_THRESH 3
int sysctl_tcp_reordering __read_mostly = TCP_FASTRETRANS_THRESH;

tcp_init_sock()
-->tp->reordering = sysctl_tcp_reordering;

static bool tcp_time_to_recover(struct sock *sk, int flag)
{
	/* Not-A-Trick#2 : Classic rule... */
	if (tcp_dupack_heuristics(tp) > tp->reordering)
	        return true;
}

34 tcp_retrans_collapse
default value : 1
This option decides whether we allow collapse segments during retransmission.
tcp_retrans_try_collapse()

35 tcp_retries1
It decides the max retransmit times, if bigger than this limit,
we need to check route table.

36 tcp_retries2
It decides the max retransmit times, if bigger than this limit,
we have to abort.

37 tcp_rfc1337
default value : 0
tcp_timewait_state_process()
---->  	if (sysctl_tcp_rfc1337 == 0) {
		inet_twsk_deschedule(tw, &tcp_death_row);
		inet_twsk_put(tw);
		return TCP_TW_SUCCESS;
     	}
	inet_twsk_schedule(tw, &tcp_death_row, TCP_TIMEWAIT_LEN, TCP_TIMEWAIT_LEN);

This option decides how to handle rst packet in timewait state.

39 tcp_sack
This option decides whether we support sack function,
1 : enable
0 : disable
40 tcp_slow_start_after_idle
41 tcp_stdurg
This variable enables or disables RFC 1122 compliance.

42 tcp_synack_retries
43 tcp_syncookies
default value : 1
tcp_conn_request()
-->if ((sysctl_tcp_syncookies == 2 || inet_csk_reqsk_queue_is_full(sk)) && !isn) {
	want_cookie = tcp_syn_flood_action(sk, skb, rsk_ops->slab_name);
	if (!want_cookie)
		goto drop;
}

If we enable tcp_syncookies, and if reqsk_queue_is_full() is true,
then we should generate a special isn and send the syn+ack back instead of
dropping the syn from the client.

But tcp_syncookies is not recommended to use, we should modify
tcp_max_syn_backlog and backlog to accept more cocurrent connections.

44 tcp_syn_retries
It decides how many times that a syn packet should be retransmitted. 

45 tcp_thin_dupack
46 tcp_thin_linear_timeouts
47 tcp_timestamps
This option decides whether we support tcp timestamp function,
1 : enable
0 : disable

48 tcp_tso_win_divisor
49 tcp_tw_recycle
default value : 0
It decides whether we enable SO_REUSEADDR

50 tcp_tw_reuse

51 tcp_window_scaling
This option decides whether we support window scale option,
1 : enable
0 : disable

53 tcp_workaround_signed_windows
